package controlador;

import Adapter.UnifiedSystemAdapter;
import Factory.PostulanteFactory;
import modelo.*;
import java.util.List;
import java.util.ArrayList;

/**
 * Generador de reportes del sistema de becas.
 * Utiliza las mejoras implementadas (Factory con validaciones, Adapter unificado, Observer mejorado)
 * para generar reportes completos basados en los datos reales del sistema.
 */
public class GeneradorReportes {
    
    private final GestorPostulantes gestorPostulantes;
    private final GestorSolicitudes gestorSolicitudes;
    private final GestorVisitas gestorVisitas;
    private final GestorDocumentos gestorDocumentaciones;
    private final UnifiedSystemAdapter adapter;
    
    /**
     * Constructor que recibe todos los gestores del sistema.
     */
    public GeneradorReportes(GestorPostulantes gestorPostulantes, 
                           GestorSolicitudes gestorSolicitudes,
                           GestorVisitas gestorVisitas, 
                           GestorDocumentos gestorDocumentaciones) {
        this.gestorPostulantes = gestorPostulantes;
        this.gestorSolicitudes = gestorSolicitudes;
        this.gestorVisitas = gestorVisitas;
        this.gestorDocumentaciones = gestorDocumentaciones;
        
        // Crear el adapter unificado usando los datos del sistema
        this.adapter = crearAdapterUnificado();
    }
    
    /**
     * Genera el reporte completo del sistema integrando todas las mejoras.
     */
    public void generarReporteCompleto() {
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üöÄ REPORTE COMPLETO DEL SISTEMA DE BECAS");
        System.out.println("=".repeat(80));
        
        // 1. Reporte de validaciones del Factory
        generarReporteValidaciones();
        
        // 2. Reporte del Adapter unificado
        generarReporteAdapterUnificado();
        
        // 3. Estad√≠sticas generales
        generarEstadisticasGenerales();
        
        // 4. An√°lisis detallado de datos
        generarAnalisisDetallado();
        
        // 5. Reporte de funcionalidades Observer
        generarReporteObserver();
        
        System.out.println("\n" + "=".repeat(80));
        System.out.println("üìä REPORTE GENERADO EXITOSAMENTE");
        System.out.println("=".repeat(80));
    }
    
    /**
     * Genera reporte sobre las capacidades de validaci√≥n del Factory mejorado.
     */
    private void generarReporteValidaciones() {
        System.out.println("\nüìã 1. CAPACIDADES DE VALIDACI√ìN (Factory Mejorado)");
        System.out.println("-".repeat(50));
        
        PostulanteFactory factory = new PostulanteFactory();
        
        System.out.println("‚úÖ Validaciones disponibles:");
        System.out.println("   ‚Ä¢ Validaci√≥n de correo electr√≥nico (formato usuario@dominio.ext)");
        System.out.println("   ‚Ä¢ Validaci√≥n de DNI (exactamente 8 d√≠gitos)");
        System.out.println("   ‚Ä¢ Validaci√≥n de nombres (solo letras y espacios)");
        System.out.println("   ‚Ä¢ Validaci√≥n de puntajes (rango 0-100)");
        
        System.out.println("\nüîß M√©todos de creaci√≥n disponibles:");
        System.out.println("   ‚Ä¢ crearPostulante() - M√©todo original (sin validaci√≥n)");
        System.out.println("   ‚Ä¢ crearPostulanteValidado() - Con validaci√≥n autom√°tica");
        System.out.println("   ‚Ä¢ crearPostulanteConValidacionInteractiva() - Con recuperaci√≥n de errores");
        
        // Ejemplo de validaci√≥n en vivo (si hay datos)
        List<Postulante> postulantes = gestorPostulantes.obtenerTodosLosPostulantes();
        if (!postulantes.isEmpty()) {
            System.out.println("\nüìä An√°lisis de datos existentes:");
            int validosCorreo = 0, validosDNI = 0, validosNombre = 0;
            
            for (Postulante p : postulantes) {
                if (esCorreoValido(p.getCorreo())) validosCorreo++;
                if (esDNIValido(p.getDni())) validosDNI++;
                if (esNombreValido(p.getNombre()) && esNombreValido(p.getApellido())) validosNombre++;
            }
            
            System.out.println("   ‚Ä¢ Postulantes con correo v√°lido: " + validosCorreo + "/" + postulantes.size());
            System.out.println("   ‚Ä¢ Postulantes con DNI v√°lido: " + validosDNI + "/" + postulantes.size());
            System.out.println("   ‚Ä¢ Postulantes con nombres v√°lidos: " + validosNombre + "/" + postulantes.size());
        } else {
            System.out.println("\nüìù No hay postulantes registrados para validar.");
        }
    }
    
    /**
     * Genera reporte usando el Adapter unificado.
     */
    private void generarReporteAdapterUnificado() {
        System.out.println("\nüîå 2. ADAPTER UNIFICADO PARA SISTEMAS EXTERNOS");
        System.out.println("-".repeat(50));
        
        System.out.println("‚úÖ API unificada disponible:");
        System.out.println("   ‚Ä¢ obtenerPostulantesOrdenados()");
        System.out.println("   ‚Ä¢ obtenerSolicitudesPendientes()");
        System.out.println("   ‚Ä¢ obtenerSolicitudesPorEstado(estado)");
        System.out.println("   ‚Ä¢ obtenerPostulantesPorPuntaje(minimo)");
        System.out.println("   ‚Ä¢ procesarSolicitudDe(postulante)");
        System.out.println("   ‚Ä¢ obtenerEstadisticasGenerales()");
        System.out.println("   ‚Ä¢ buscarPostulantesPorNombre(nombre)");
        
        System.out.println("\nüìä Datos procesados por el Adapter:");
        
        try {
            // Postulantes ordenados
            List<Postulante> ordenados = adapter.obtenerPostulantesOrdenados();
            System.out.println("   ‚Ä¢ Postulantes ordenados alfab√©ticamente: " + ordenados.size());
            
            if (!ordenados.isEmpty()) {
                System.out.println("     ‚îî‚îÄ Primeros 3: ");
                for (int i = 0; i < Math.min(3, ordenados.size()); i++) {
                    Postulante p = ordenados.get(i);
                    System.out.println("        " + (i+1) + ". " + p.getNombre() + " " + p.getApellido());
                }
            }
            
            // Solicitudes pendientes
            List<Solicitud> pendientes = adapter.obtenerSolicitudesPendientes();
            System.out.println("   ‚Ä¢ Solicitudes pendientes: " + pendientes.size());
            
            // Postulantes con buen puntaje
            List<Postulante> topPuntaje = adapter.obtenerPostulantesPorPuntaje(70.0);
            System.out.println("   ‚Ä¢ Postulantes con puntaje ‚â• 70: " + topPuntaje.size());
            
        } catch (Exception e) {
            System.out.println("   ‚ö†Ô∏è Error al procesar datos: " + e.getMessage());
        }
    }
    
    /**
     * Genera estad√≠sticas generales del sistema.
     */
    private void generarEstadisticasGenerales() {
        System.out.println("\nüìä 3. ESTAD√çSTICAS GENERALES DEL SISTEMA");
        System.out.println("-".repeat(50));
        
        try {
            int[] estadisticas = adapter.obtenerEstadisticasGenerales();
            
            System.out.println("üìà Resumen ejecutivo:");
            System.out.println("   ‚Ä¢ Total de postulantes registrados: " + estadisticas[0]);
            System.out.println("   ‚Ä¢ Solicitudes pendientes de procesamiento: " + estadisticas[1]);
            System.out.println("   ‚Ä¢ Solicitudes ya procesadas: " + estadisticas[2]);
            
            // Calcular porcentajes si hay datos
            int totalSolicitudes = estadisticas[1] + estadisticas[2];
            if (totalSolicitudes > 0) {
                double porcentajePendientes = (estadisticas[1] * 100.0) / totalSolicitudes;
                double porcentajeProcesadas = (estadisticas[2] * 100.0) / totalSolicitudes;
                
                System.out.println("\nüìä Distribuci√≥n de solicitudes:");
                System.out.println("   ‚Ä¢ Pendientes: " + String.format("%.1f%%", porcentajePendientes));
                System.out.println("   ‚Ä¢ Procesadas: " + String.format("%.1f%%", porcentajeProcesadas));
            }
            
            // Informaci√≥n adicional
            System.out.println("\nüìã Informaci√≥n adicional:");
            System.out.println("   ‚Ä¢ Total de documentaciones registradas: " + obtenerTotalDocumentaciones());
            System.out.println("   ‚Ä¢ Sistema de visitas configurado: ‚úÖ Activo");
            
        } catch (Exception e) {
            System.out.println("   ‚ö†Ô∏è Error al obtener estad√≠sticas: " + e.getMessage());
        }
        
        // Resumen detallado del adapter
        System.out.println("\n" + adapter.obtenerResumenDetallado());
    }
    
    /**
     * Genera an√°lisis detallado de los datos.
     */
    private void generarAnalisisDetallado() {
        System.out.println("\nüîç 4. AN√ÅLISIS DETALLADO DE DATOS");
        System.out.println("-".repeat(50));
        
        // An√°lisis de postulantes
        List<Postulante> postulantes = gestorPostulantes.obtenerTodosLosPostulantes();
        if (!postulantes.isEmpty()) {
            System.out.println("üë• An√°lisis de postulantes:");
            
            // Estad√≠sticas de puntajes
            double puntajePromedio = postulantes.stream()
                    .mapToDouble(Postulante::getPuntaje)
                    .average()
                    .orElse(0.0);
            
            double puntajeMaximo = postulantes.stream()
                    .mapToDouble(Postulante::getPuntaje)
                    .max()
                    .orElse(0.0);
            
            System.out.println("   ‚Ä¢ Puntaje promedio: " + String.format("%.2f", puntajePromedio));
            System.out.println("   ‚Ä¢ Puntaje m√°ximo: " + String.format("%.2f", puntajeMaximo));
            
            // Distribuci√≥n por rangos de puntaje
            long excelentes = postulantes.stream().filter(p -> p.getPuntaje() >= 90).count();
            long buenos = postulantes.stream().filter(p -> p.getPuntaje() >= 70 && p.getPuntaje() < 90).count();
            long regulares = postulantes.stream().filter(p -> p.getPuntaje() < 70).count();
            
            System.out.println("\nüìä Distribuci√≥n por calificaci√≥n:");
            System.out.println("   ‚Ä¢ Excelentes (‚â•90): " + excelentes + " postulantes");
            System.out.println("   ‚Ä¢ Buenos (70-89): " + buenos + " postulantes");
            System.out.println("   ‚Ä¢ Regulares (<70): " + regulares + " postulantes");
        }
        
        // An√°lisis de solicitudes por estado
        analizarSolicitudesPorEstado();
    }
    
    /**
     * Genera reporte de las capacidades del Observer mejorado.
     */
    private void generarReporteObserver() {
        System.out.println("\nüëÅÔ∏è 5. CAPACIDADES DEL OBSERVER MEJORADO");
        System.out.println("-".repeat(50));
        
        System.out.println("üîî Funcionalidades de notificaci√≥n:");
        System.out.println("   ‚Ä¢ Notificaci√≥n autom√°tica en cambios de estado");
        System.out.println("   ‚Ä¢ Modo silencioso para cambios sin notificaci√≥n");
        System.out.println("   ‚Ä¢ Interfaz h√≠brida (simple y detallada)");
        System.out.println("   ‚Ä¢ Compatibilidad total con sistema original");
        
        System.out.println("\nüéõÔ∏è M√©todos disponibles:");
        System.out.println("   ‚Ä¢ setEstado() - Cambio con notificaci√≥n autom√°tica");
        System.out.println("   ‚Ä¢ setEstadoSilencioso() - Cambio sin notificaci√≥n");
        System.out.println("   ‚Ä¢ procesar() - Procesamiento con notificaci√≥n");
        System.out.println("   ‚Ä¢ estaProcesada() - Verificaci√≥n de estado procesado");
        
        System.out.println("\nüì° Tipos de observadores:");
        System.out.println("   ‚Ä¢ DetailedSolicitudObserver - Notificaciones detalladas");
        System.out.println("   ‚Ä¢ SimpleSolicitudObserver - Notificaciones b√°sicas");
        System.out.println("   ‚Ä¢ HybridSolicitudObserver - Interfaz flexible");
        
        System.out.println("\n‚úÖ El sistema est√° preparado para implementar notificaciones");
        System.out.println("   autom√°ticas en tiempo real cuando se cambien estados de solicitudes.");
    }
    
    // M√©todos auxiliares
    
    private UnifiedSystemAdapter crearAdapterUnificado() {
        // Obtener las estructuras de datos del sistema
        ABB abb = gestorPostulantes.getAbb(); // Necesitaremos agregar este getter
        ColaCircular cola = gestorSolicitudes.getColaSolicitudes(); // Necesitaremos agregar este getter
        List<Documentacion> docs = new ArrayList<>(); // Por ahora lista vac√≠a
        ListaCircularVisitas visitas = gestorVisitas.getListaVisitas(); // Necesitaremos agregar este getter
        
        return new UnifiedSystemAdapter(abb, cola, docs, visitas);
    }
    
    private void analizarSolicitudesPorEstado() {
        System.out.println("\nüìã An√°lisis de solicitudes por estado:");
        
        try {
            List<Solicitud> pendientes = adapter.obtenerSolicitudesPorEstado("Pendiente");
            List<Solicitud> aprobadas = adapter.obtenerSolicitudesPorEstado("Aprobada");
            List<Solicitud> rechazadas = adapter.obtenerSolicitudesPorEstado("Rechazada");
            List<Solicitud> procesadas = adapter.obtenerSolicitudesPorEstado("Procesada");
            
            System.out.println("   ‚Ä¢ Pendientes: " + pendientes.size());
            System.out.println("   ‚Ä¢ Aprobadas: " + aprobadas.size());
            System.out.println("   ‚Ä¢ Rechazadas: " + rechazadas.size());
            System.out.println("   ‚Ä¢ Procesadas: " + procesadas.size());
            
        } catch (Exception e) {
            System.out.println("   ‚ö†Ô∏è Error al analizar solicitudes: " + e.getMessage());
        }
    }
    
    private int obtenerTotalDocumentaciones() {
        // Por ahora retorna 0, se puede implementar cuando haya acceso a los datos
        return 0;
    }
    
    // M√©todos de validaci√≥n (copiados del PostulanteFactory para consistencia)
    private boolean esCorreoValido(String correo) {
        return correo != null && correo.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$");
    }
    
    private boolean esDNIValido(String dni) {
        return dni != null && dni.matches("^\\d{8}$");
    }
    
    private boolean esNombreValido(String nombre) {
        return nombre != null && !nombre.trim().isEmpty() && nombre.matches("^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë ]+$");
    }
}
